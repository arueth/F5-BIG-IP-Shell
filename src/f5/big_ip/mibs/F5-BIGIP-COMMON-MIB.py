# PySNMP SMI module. Autogenerated from smidump -f python F5-BIGIP-COMMON-MIB
# by libsmi2pysnmp-0.1.3 at Wed Jun 28 21:59:48 2017,
# Python version sys.version_info(major=2, minor=7, micro=10, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ModuleCompliance, NotificationGroup, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
( Bits, Integer32, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, enterprises, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "enterprises")
( DisplayString, TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")

# Types

class LongDisplayString(TextualConvention, OctetString):
    displayHint = "1024a"
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(0,1024)
    

# Objects

f5 = ModuleIdentity((1, 3, 6, 1, 4, 1, 3375)).setRevisions(("2012-12-07 01:08",))
if mibBuilder.loadTexts: f5.setOrganization("F5 Networks, Inc.")
if mibBuilder.loadTexts: f5.setContactInfo("postal: F5 Networks, Inc. \n401 Elliott Ave. West\nSeattle,  WA 98119\nphone:  (206) 272-5555\nemail:  support@f5.com")
if mibBuilder.loadTexts: f5.setDescription("Top-level infrastructure of the F5 enterprise MIB tree.")
bigipTrafficMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2))
bigipNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 4))
bigipNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0))
bigipNotifyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 4, 1))
bigipNotifyObjMsg = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bigipNotifyObjMsg.setDescription("The additional information about the related notification.")
bigipNotifyObjNode = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bigipNotifyObjNode.setDescription("The user-assigned name or IP address of the node.")
bigipNotifyObjPort = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bigipNotifyObjPort.setDescription("The port or service name.")
bigipCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 5))
bigipCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 5, 1))
bigipGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2))
bigipNotificationGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 4))

# Augmentions

# Notifications

bigipAgentStart = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 1)).setObjects(*() )
if mibBuilder.loadTexts: bigipAgentStart.setDescription("An indication that the agent has started running.")
bigipAgentShutdown = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 2)).setObjects(*() )
if mibBuilder.loadTexts: bigipAgentShutdown.setDescription("An indication that the agent is in the process of being shut down.")
bigipAgentRestart = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 3)).setObjects(*() )
if mibBuilder.loadTexts: bigipAgentRestart.setDescription("An indication that the agent has been restarted.\n(eg. It happens when a SIGHUP is received.)\nThis does not imply anything about whether the configuration has\nchanged (unlike the standard coldStart or warmStart traps)")
bigipCpuTempHigh = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 4)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipCpuTempHigh.setDescription("CPU temperature is too high.")
bigipCpuFanSpeedLow = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 5)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipCpuFanSpeedLow.setDescription("CPU fan speed is too low.")
bigipCpuFanSpeedBad = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 6)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipCpuFanSpeedBad.setDescription("CPU fan speed signal not received.")
bigipChassisTempHigh = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 7)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipChassisTempHigh.setDescription("Chassis temperature is too high.")
bigipChassisFanBad = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 8)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipChassisFanBad.setDescription("Chassis fan status is bad.")
bigipChassisPowerSupplyBad = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 9)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipChassisPowerSupplyBad.setDescription("Chassis power supply status is bad.")
bigipServiceDown = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 10)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjPort"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjNode"), ) )
if mibBuilder.loadTexts: bigipServiceDown.setDescription("A service is detected DOWN.")
bigipServiceUp = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 11)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjPort"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjNode"), ) )
if mibBuilder.loadTexts: bigipServiceUp.setDescription("A service is detected UP.")
bigipNodeDown = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 12)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjNode"), ) )
if mibBuilder.loadTexts: bigipNodeDown.setDescription("A node is detected DOWN.")
bigipNodeUp = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 13)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjNode"), ) )
if mibBuilder.loadTexts: bigipNodeUp.setDescription("A node is detected UP.")
bigipStandby = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 14)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipStandby.setDescription("The system is going into standby mode.")
bigipActive = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 15)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipActive.setDescription("The system is going into active mode.")
bigipActiveActive = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 16)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipActiveActive.setDescription("The system is going into active-active mode.")
bigipFeatureFailed = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 17)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipFeatureFailed.setDescription("A high availability feature triggered action failed.")
bigipFeatureOnline = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 18)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipFeatureOnline.setDescription("A high availability feature is now responding.")
bigipLicenseFailed = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 19)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipLicenseFailed.setDescription("The license validation failed.")
bigipLicenseExpired = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 20)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipLicenseExpired.setDescription("The license has expired.")
bigipTamdAlert = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 21)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipTamdAlert.setDescription("Too many authentication failures (> 60) in 1 second to\nTMM (Traffic Management Module).")
bigipAggrReaperStateChange = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 22)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipAggrReaperStateChange.setDescription("The aggressive reaper state changed. Aggressive reaper \nstate changes indicate the system is moving into distress-mode \nfor DOS prevention.")
bigipARPConflict = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 23)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipARPConflict.setDescription("There is an ARP conflict.")
bigipNetLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 24)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipNetLinkDown.setDescription("An internal interface link is down. This is for L1 and L2. \nThese are internal links within the box connecting the CPU \nand Switch subsystems, which should never lose link. \nIf they do, it indicates a serious problem.")
bigipDiskPartitionWarn = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 25)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipDiskPartitionWarn.setDescription("The disk partition free space is very limited, which is   \nless than a specified limit. By default, the limit is set\nto 30% of total disk space.")
bigipDiskPartitionGrowth = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 26)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipDiskPartitionGrowth.setDescription("The disk partition exceeds the specified growth limit. \nBy default, the limit is set to 5% of the total disk space.\nThe growth is difference of two consecutive monitoring data.")
bigipAuthFailed = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 27)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipAuthFailed.setDescription("The login/sshd authentication has failed.")
bigipConfigLoaded = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 28)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipConfigLoaded.setDescription("Deprecated! The compoent which created this event has been\ndeprecated.  The configuration was loaded.")
bigipLogEmerg = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 29)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipLogEmerg.setDescription("The system is in an unusable situation.")
bigipLogAlert = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 30)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipLogAlert.setDescription("Action must be taken immediately for the system to work\nproperly.")
bigipLogCrit = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 31)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipLogCrit.setDescription("The system is in a critical condition.")
bigipLogErr = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 32)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipLogErr.setDescription("The system has some error conditions.")
bigipLogWarning = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 33)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipLogWarning.setDescription("The system is experiencing some warning conditions.")
bigipPacketRejected = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 34)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipPacketRejected.setDescription("The packets are rejected.")
bigipCompLimitExceeded = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 35)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipCompLimitExceeded.setDescription("The compression license limit is exceeded.")
bigipSslLimitExceeded = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 36)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipSslLimitExceeded.setDescription("The SSL license limits are exceeded, \neither for TPS (Transactions Per Second) or \nfor MPS (Megabits Per Second).")
bigipExternalLinkChange = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 37)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipExternalLinkChange.setDescription("An external interface link status changes.  \nFor a fixed port, this is an occurrence when network cables \nare connected  or removed, and the network is reconfigured; \nfor a pluggable port (such as a SFP or XFP port), this happens \nwhen the pluggable unit is plugged in or unplugged, \nor when a cable is connected or removed from a plugged port.  \nThe possible values are UP, DOWN, or UNPOPULATED.")
bigipAsmRequestBlocked = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 38)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipAsmRequestBlocked.setDescription("The HTTP request was blocked because it issued (at least one)\nviolation(s) which is marked as blocking at the current active \npolicy in Application Security Module.")
bigipAsmRequestViolation = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 39)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipAsmRequestViolation.setDescription("The HTTP request issued a violation to the current active policy. \nThis violation is marked as an alerting violation in that policy\nin Application Security Module.")
bigipGtmPoolAvail = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 40)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipGtmPoolAvail.setDescription("A pool is becoming available in global traffic management module.")
bigipGtmPoolNotAvail = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 41)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipGtmPoolNotAvail.setDescription("A pool is becoming unavailable in global traffic management module.")
bigipGtmPoolDisabled = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 42)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipGtmPoolDisabled.setDescription("A pool is disabled in global traffic management module.")
bigipGtmPoolEnabled = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 43)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipGtmPoolEnabled.setDescription("A pool is enabled in global traffic management module.")
bigipGtmLinkAvail = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 44)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipGtmLinkAvail.setDescription("A link is becoming available in global traffic management module.")
bigipGtmLinkNotAvail = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 45)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipGtmLinkNotAvail.setDescription("A link is becoming unavailable in global traffic management module.")
bigipGtmLinkDisabled = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 46)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipGtmLinkDisabled.setDescription("A link is disabled in global traffic management module.")
bigipGtmLinkEnabled = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 47)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipGtmLinkEnabled.setDescription("A link is enabled in global traffic management module.")
bigipGtmWideIpAvail = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 48)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipGtmWideIpAvail.setDescription("A wide IP is becoming available in global traffic management module.")
bigipGtmWideIpNotAvail = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 49)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipGtmWideIpNotAvail.setDescription("A wide IP is becoming unavailable in global traffic management module.")
bigipGtmWideIpDisabled = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 50)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipGtmWideIpDisabled.setDescription("A wide IP is disabled in global traffic management module.")
bigipGtmWideIpEnabled = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 51)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipGtmWideIpEnabled.setDescription("A wide IP is enabled in global traffic management module.")
bigipGtmPoolMbrAvail = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 52)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipGtmPoolMbrAvail.setDescription("A pool member is becoming available in global traffic management module.")
bigipGtmPoolMbrNotAvail = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 53)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipGtmPoolMbrNotAvail.setDescription("A pool member is becoming unavailable in global traffic management module.")
bigipGtmPoolMbrDisabled = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 54)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipGtmPoolMbrDisabled.setDescription("A pool member is disabled in global traffic management module.")
bigipGtmPoolMbrEnabled = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 55)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipGtmPoolMbrEnabled.setDescription("A pool member is enabled in global traffic management module.")
bigipGtmServerAvail = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 56)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipGtmServerAvail.setDescription("A server is becoming available in global traffic management module.")
bigipGtmServerNotAvail = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 57)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipGtmServerNotAvail.setDescription("A server is becoming unavailable in global traffic management module.")
bigipGtmServerDisabled = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 58)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipGtmServerDisabled.setDescription("A server is disabled in global traffic management module.")
bigipGtmServerEnabled = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 59)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipGtmServerEnabled.setDescription("A server is enabled in global traffic management module.")
bigipGtmVsAvail = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 60)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipGtmVsAvail.setDescription("A virtual server is becoming available in global traffic management module.")
bigipGtmVsNotAvail = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 61)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipGtmVsNotAvail.setDescription("A virtual server is becoming unavailable in global traffic management module.")
bigipGtmVsDisabled = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 62)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipGtmVsDisabled.setDescription("A virtual server is disabled in global traffic management module.")
bigipGtmVsEnabled = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 63)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipGtmVsEnabled.setDescription("A virtual server is enabled in global traffic management module.")
bigipGtmDcAvail = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 64)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipGtmDcAvail.setDescription("A data center is becoming available in global traffic management module.")
bigipGtmDcNotAvail = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 65)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipGtmDcNotAvail.setDescription("A data center is becoming unavailable in global traffic management module.")
bigipGtmDcDisabled = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 66)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipGtmDcDisabled.setDescription("A data center is disabled in global traffic management module.")
bigipGtmDcEnabled = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 67)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipGtmDcEnabled.setDescription("A data center is enabled in global traffic management module.")
bigipHardDiskFailure = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 68)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipHardDiskFailure.setDescription("Deprecated!  This object has been eliminated.\nThe hard disk is failing.")
bigipGtmAppObjAvail = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 69)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipGtmAppObjAvail.setDescription("An application object is becoming available in global management module.")
bigipGtmAppObjNotAvail = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 70)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipGtmAppObjNotAvail.setDescription("An application object is becoming unavailable in global management module.")
bigipGtmAppAvail = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 71)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipGtmAppAvail.setDescription("An application is becoming available in global management module.")
bigipGtmAppNotAvail = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 72)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipGtmAppNotAvail.setDescription("An application is becoming unavailable in global management module.")
bigipGtmJoinedGroup = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 73)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipGtmJoinedGroup.setDescription("BIG-IP GTM joined sync group.")
bigipGtmLeftGroup = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 74)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipGtmLeftGroup.setDescription("BIG-IP GTM left sync group.")
bigipStandByFail = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 75)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipStandByFail.setDescription("In failover condition, this standby will not be able to go active.")
bigipInetPortExhaustion = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 76)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipInetPortExhaustion.setDescription("The TMM has run out of source ports and cannot open new communications channels with other machines.")
bigipGtmBoxAvail = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 77)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipGtmBoxAvail.setDescription("A gtm machine (which equates to an iquery connect to a gtm machine) has gone UP")
bigipGtmBoxNotAvail = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 78)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipGtmBoxNotAvail.setDescription("A gtm machine (which equates to an iquery connect to a gtm machine) has gone DOWN")
bigipAsmFtpRequestBlocked = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 79)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipAsmFtpRequestBlocked.setDescription("The FTP request was blocked because it issued (at least one)\nviolation(s) which is marked as blocking at the current active\npolicy in Application Security Module.")
bigipAsmFtpRequestViolation = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 80)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipAsmFtpRequestViolation.setDescription("The FTP request issued a violation to the current active\npolicy. This violation is marked as an alerting violation \nin that policy in Application Security Module.")
bigipGtmBig3dSslCertExpired = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 81)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipGtmBig3dSslCertExpired.setDescription("BIG-IP GTM BIG3D SSL Cert has expired.")
bigipGtmBig3dSslCertWillExpire = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 82)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipGtmBig3dSslCertWillExpire.setDescription("BIG-IP GTM BIG3D SSL Cert will expire.")
bigipGtmSslCertExpired = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 83)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipGtmSslCertExpired.setDescription("BIG-IP GTM SSL Cert has expired.")
bigipGtmSslCertWillExpire = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 84)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipGtmSslCertWillExpire.setDescription("BIG-IP GTM SSL Cert will expire.")
bigipAsmSmtpRequestBlocked = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 85)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipAsmSmtpRequestBlocked.setDescription("The SMTP request was blocked because it issued (at least one)\nviolation(s) which is marked as blocking at the current active\npolicy in Application Security Module.")
bigipAsmSmtpRequestViolation = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 86)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipAsmSmtpRequestViolation.setDescription("The SMTP request issued a violation to the current active\npolicy. This violation is marked as an alerting violation \nin that policy in Application Security Module.")
bigipBladeTempHigh = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 87)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipBladeTempHigh.setDescription("Blade temperature is too high.")
bigipBladeNoPower = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 88)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipBladeNoPower.setDescription("A blade lost power. The blade may be pulled out")
bigipClusterdNoResponse = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 89)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipClusterdNoResponse.setDescription("The cluster daemon failed to respond for 10 or more seconds.")
bigipBladeOffline = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 90)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipBladeOffline.setDescription("A blade has failed - offline.")
bigipAsmDosAttackDetected = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 91)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipAsmDosAttackDetected.setDescription("DoS attack detected by Application Security Module.")
bigipAsmBruteForceAttackDetected = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 92)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipAsmBruteForceAttackDetected.setDescription("Brute force attack detected by Application Security Module.")
bigipAomCpuTempTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 93)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipAomCpuTempTooHigh.setDescription("AOM reports the air temperature near the host CPU too high.")
bigipGtmKeyGenerationRollover = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 94)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipGtmKeyGenerationRollover.setDescription("DNSSEC Key generation has rolled over.")
bigipGtmKeyGenerationExpiration = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 95)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipGtmKeyGenerationExpiration.setDescription("DNSSEC Key generation has expired.")
bigipRaidDiskFailure = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 96)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipRaidDiskFailure.setDescription("Disk failure in a RAID disk array.")
bigipGtmProberPoolStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 97)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipGtmProberPoolStatusChange.setDescription("Prober Pool Status Change.")
bigipGtmProberPoolStatusChangeReason = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 98)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipGtmProberPoolStatusChangeReason.setDescription("Prober Pool Status Change Reason.")
bigipGtmProberPoolDisabled = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 99)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipGtmProberPoolDisabled.setDescription("Prober Pool Disabled.")
bigipGtmProberPoolEnabled = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 100)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipGtmProberPoolEnabled.setDescription("Prober Pool Enabled.")
bigipGtmProberPoolMbrStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 101)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipGtmProberPoolMbrStatusChange.setDescription("Prober Pool Member Status Change.")
bigipGtmProberPoolMbrStatusChangeReason = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 102)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipGtmProberPoolMbrStatusChangeReason.setDescription("Prober Pool Member Status Change Reason.")
bigipGtmProberPoolMbrDisabled = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 103)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipGtmProberPoolMbrDisabled.setDescription("Prober Pool Member Disabled.")
bigipGtmProberPoolMbrEnabled = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 104)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipGtmProberPoolMbrEnabled.setDescription("Prober Pool Member Enabled.")
bigipAvrAlertsMetricSnmp = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 105)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipAvrAlertsMetricSnmp.setDescription("AVR alert metric state changed - notification for SNMP.")
bigipAvrAlertsMetricSmtp = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 106)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipAvrAlertsMetricSmtp.setDescription("Deprecated! AVR alert metric state changed - notification for SMTP (based on SNMP).")
bigipVcmpAlertsVcmpPowerOn = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 107)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipVcmpAlertsVcmpPowerOn.setDescription("A VCMP guest is powered on from a suspended or powered off state.")
bigipVcmpAlertsVcmpPowerOff = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 108)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipVcmpAlertsVcmpPowerOff.setDescription("A VCMP guest is powered off.")
bigipVcmpAlertsVcmpHBLost = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 109)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipVcmpAlertsVcmpHBLost.setDescription("A VCMP guest heartbeat is lost.")
bigipVcmpAlertsVcmpHBDetected = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 110)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipVcmpAlertsVcmpHBDetected.setDescription("A VCMP guest heartbeat is detected or regained.")
bigipSsdMwiNearThreshold = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 111)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipSsdMwiNearThreshold.setDescription("SSD disk wear-out indicator is near its threshold.")
bigipSsdMwiReachedThreshold = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 112)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipSsdMwiReachedThreshold.setDescription("SSD disk wear-out indicator has reached its threshold.")
bigipSystemCheckAlertTempHigh = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 113)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipSystemCheckAlertTempHigh.setDescription("Temperature is too high.")
bigipSystemCheckAlertVoltageHigh = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 114)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipSystemCheckAlertVoltageHigh.setDescription("Voltage is too high.")
bigipSystemCheckAlertFanSpeedLow = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 115)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipSystemCheckAlertFanSpeedLow.setDescription("Fan speed is too low.")
bigipLibhalSsdPhysicalDiskRemoved = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 116)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipLibhalSsdPhysicalDiskRemoved.setDescription("SSD physical disk was removed.")
bigipLibhalSsdLogicalDiskRemoved = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 117)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipLibhalSsdLogicalDiskRemoved.setDescription("SSD logical disk was removed.")
bigipLibhalDiskBayRemoved = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 118)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipLibhalDiskBayRemoved.setDescription("Disk sled was removed from a bay.")
bigipLibhalBladePoweredOff = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 119)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipLibhalBladePoweredOff.setDescription("Blade is about to be powered off.")
bigipLibhalSensorAlarmCritical = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 120)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipLibhalSensorAlarmCritical.setDescription("Blade hardware sensor indicated critical alarm.")
bigipChmandAlertFanTrayBad = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 121)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipChmandAlertFanTrayBad.setDescription("Chassis fan tray is bad or removed.")
bigipUnsolicitedRepliesExceededThreshold = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 122)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipUnsolicitedRepliesExceededThreshold.setDescription("The DNS cache object received unsolicited query replies\nexceeding a configured threshold.")
bigipSystemCheckAlertVoltageLow = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 123)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipSystemCheckAlertVoltageLow.setDescription("Voltage is too low.")
bigipSystemCheckAlertMilliVoltageHigh = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 124)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipSystemCheckAlertMilliVoltageHigh.setDescription("Milli-Voltage is too high.")
bigipSystemCheckAlertCurrentHigh = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 125)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipSystemCheckAlertCurrentHigh.setDescription("Current is too high.")
bigipSystemCheckAlertPowerHigh = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 126)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipSystemCheckAlertPowerHigh.setDescription("Power is too high.")
bigipSystemCheckAlertMilliVoltageLow = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 127)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipSystemCheckAlertMilliVoltageLow.setDescription("Milli-Voltage is too low.")
bigipSystemCheckAlertCurrentLow = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 128)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipSystemCheckAlertCurrentLow.setDescription("Current is too low.")
bigipSystemCheckAlertPowerLow = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 129)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipSystemCheckAlertPowerLow.setDescription("Power is too low.")
bigipNodeRate = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 130)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipNodeRate.setDescription("A node has exceeded the allowed rate.")
bigipMemberRate = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 131)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipMemberRate.setDescription("A pool member has exceeded the allowed rate.")
bigipVirtualRate = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 132)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipVirtualRate.setDescription("A virtual has exceeded the allowed rate.")
bigipDosAttackStart = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 133)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipDosAttackStart.setDescription("A DOS attack start was detected.")
bigipDosAttackStop = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 134)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipDosAttackStop.setDescription("A DOS attack stop was detected.")
bigipLtmVsAvail = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 135)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipLtmVsAvail.setDescription("A virtual has become available.")
bigipLtmVsUnavail = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 136)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipLtmVsUnavail.setDescription("A virtual has become unavailable.")
bigipLtmVsEnabled = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 137)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipLtmVsEnabled.setDescription("A virtual has become enabled.")
bigipLtmVsDisabled = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 138)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipLtmVsDisabled.setDescription("A virtual has become disabled.")
bigipDnsRequestRateLimiterEngaged = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 139)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipDnsRequestRateLimiterEngaged.setDescription("The DNS Services request rate limiter has been engaged.")
bigipGtmRequestRateLimiterEngaged = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 140)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipGtmRequestRateLimiterEngaged.setDescription("The GTM request rate limiter has been engaged.")
bigipTrafficGroupStandby = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 141)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipTrafficGroupStandby.setDescription("A traffic group is going into standby mode on the system.")
bigipTrafficGroupActive = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 142)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipTrafficGroupActive.setDescription("A traffic group is going into active mode on the system.")
bigipTrafficGroupOffline = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 143)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipTrafficGroupOffline.setDescription("A traffic group is going into offline mode on the system.")
bigipTrafficGroupForcedOffline = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 144)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipTrafficGroupForcedOffline.setDescription("A traffic group is going into forced offline mode on the system.")
bigipTrafficGroupDeactivate = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 145)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipTrafficGroupDeactivate.setDescription("A traffic group is being deactivated on the system.")
bigipTrafficGroupActivate = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 146)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipTrafficGroupActivate.setDescription("A traffic group is being activated on the system.")
bigipPsPowerOn = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 147)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipPsPowerOn.setDescription("Power supply unit has powered on.")
bigipPsPowerOff = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 148)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipPsPowerOff.setDescription("Power supply unit has powered off.")
bigipPsAbsent = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 149)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipPsAbsent.setDescription("Power supply unit is absent.")
bigipClusterPrimaryChanged = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 150)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipClusterPrimaryChanged.setDescription("The primary blade has been changed in the cluster system.")
bigipSystemShutdown = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 151)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipSystemShutdown.setDescription("The system is shutting down.")
bigipFipsDeviceError = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 152)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipFipsDeviceError.setDescription("Encountered error in the FIPS card operation.")
bigipUpdatePriority = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 153)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipUpdatePriority.setDescription("There is a high priority software update available.")
bigipUpdateServer = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 154)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipUpdateServer.setDescription("Unable to connect to the F5 Update Check server.")
bigipUpdateError = NotificationType((1, 3, 6, 1, 4, 1, 3375, 2, 4, 0, 155)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ) )
if mibBuilder.loadTexts: bigipUpdateError.setDescription("There was an error checking for updates.")

# Groups

bigipNotifyObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 4, 1)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipNotifyObjMsg"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjPort"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjNode"), ) )
if mibBuilder.loadTexts: bigipNotifyObjectsGroup.setDescription("A collection of objects used for the notification MIB.")
bigipAgentNotifyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 4, 2)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipAgentShutdown"), ("F5-BIGIP-COMMON-MIB", "bigipAgentRestart"), ("F5-BIGIP-COMMON-MIB", "bigipAgentStart"), ) )
if mibBuilder.loadTexts: bigipAgentNotifyGroup.setDescription("The notifications relating to the basic operation of \nthe BIGIP agent.")
bigipSystemNotifyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 4, 3)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipSsdMwiReachedThreshold"), ("F5-BIGIP-COMMON-MIB", "bigipGtmWideIpEnabled"), ("F5-BIGIP-COMMON-MIB", "bigipNodeUp"), ("F5-BIGIP-COMMON-MIB", "bigipAuthFailed"), ("F5-BIGIP-COMMON-MIB", "bigipGtmSslCertExpired"), ("F5-BIGIP-COMMON-MIB", "bigipGtmProberPoolStatusChangeReason"), ("F5-BIGIP-COMMON-MIB", "bigipAvrAlertsMetricSnmp"), ("F5-BIGIP-COMMON-MIB", "bigipLogWarning"), ("F5-BIGIP-COMMON-MIB", "bigipSystemCheckAlertVoltageLow"), ("F5-BIGIP-COMMON-MIB", "bigipBladeTempHigh"), ("F5-BIGIP-COMMON-MIB", "bigipSystemCheckAlertVoltageHigh"), ("F5-BIGIP-COMMON-MIB", "bigipGtmPoolMbrDisabled"), ("F5-BIGIP-COMMON-MIB", "bigipGtmPoolMbrAvail"), ("F5-BIGIP-COMMON-MIB", "bigipGtmKeyGenerationRollover"), ("F5-BIGIP-COMMON-MIB", "bigipExternalLinkChange"), ("F5-BIGIP-COMMON-MIB", "bigipGtmRequestRateLimiterEngaged"), ("F5-BIGIP-COMMON-MIB", "bigipGtmPoolEnabled"), ("F5-BIGIP-COMMON-MIB", "bigipCompLimitExceeded"), ("F5-BIGIP-COMMON-MIB", "bigipGtmLinkDisabled"), ("F5-BIGIP-COMMON-MIB", "bigipGtmPoolNotAvail"), ("F5-BIGIP-COMMON-MIB", "bigipGtmDcNotAvail"), ("F5-BIGIP-COMMON-MIB", "bigipSsdMwiNearThreshold"), ("F5-BIGIP-COMMON-MIB", "bigipGtmBig3dSslCertWillExpire"), ("F5-BIGIP-COMMON-MIB", "bigipBladeNoPower"), ("F5-BIGIP-COMMON-MIB", "bigipChassisTempHigh"), ("F5-BIGIP-COMMON-MIB", "bigipLtmVsEnabled"), ("F5-BIGIP-COMMON-MIB", "bigipActive"), ("F5-BIGIP-COMMON-MIB", "bigipAsmRequestViolation"), ("F5-BIGIP-COMMON-MIB", "bigipGtmPoolMbrNotAvail"), ("F5-BIGIP-COMMON-MIB", "bigipPsAbsent"), ("F5-BIGIP-COMMON-MIB", "bigipLtmVsUnavail"), ("F5-BIGIP-COMMON-MIB", "bigipGtmKeyGenerationExpiration"), ("F5-BIGIP-COMMON-MIB", "bigipPacketRejected"), ("F5-BIGIP-COMMON-MIB", "bigipLogCrit"), ("F5-BIGIP-COMMON-MIB", "bigipFipsDeviceError"), ("F5-BIGIP-COMMON-MIB", "bigipLogAlert"), ("F5-BIGIP-COMMON-MIB", "bigipServiceDown"), ("F5-BIGIP-COMMON-MIB", "bigipActiveActive"), ("F5-BIGIP-COMMON-MIB", "bigipGtmVsEnabled"), ("F5-BIGIP-COMMON-MIB", "bigipSystemCheckAlertTempHigh"), ("F5-BIGIP-COMMON-MIB", "bigipNetLinkDown"), ("F5-BIGIP-COMMON-MIB", "bigipDosAttackStop"), ("F5-BIGIP-COMMON-MIB", "bigipAsmFtpRequestBlocked"), ("F5-BIGIP-COMMON-MIB", "bigipGtmPoolMbrEnabled"), ("F5-BIGIP-COMMON-MIB", "bigipAvrAlertsMetricSmtp"), ("F5-BIGIP-COMMON-MIB", "bigipAomCpuTempTooHigh"), ("F5-BIGIP-COMMON-MIB", "bigipGtmSslCertWillExpire"), ("F5-BIGIP-COMMON-MIB", "bigipAsmBruteForceAttackDetected"), ("F5-BIGIP-COMMON-MIB", "bigipVcmpAlertsVcmpPowerOn"), ("F5-BIGIP-COMMON-MIB", "bigipGtmBig3dSslCertExpired"), ("F5-BIGIP-COMMON-MIB", "bigipSystemCheckAlertPowerLow"), ("F5-BIGIP-COMMON-MIB", "bigipHardDiskFailure"), ("F5-BIGIP-COMMON-MIB", "bigipGtmVsNotAvail"), ("F5-BIGIP-COMMON-MIB", "bigipLtmVsAvail"), ("F5-BIGIP-COMMON-MIB", "bigipGtmLinkAvail"), ("F5-BIGIP-COMMON-MIB", "bigipTrafficGroupOffline"), ("F5-BIGIP-COMMON-MIB", "bigipStandby"), ("F5-BIGIP-COMMON-MIB", "bigipGtmVsDisabled"), ("F5-BIGIP-COMMON-MIB", "bigipGtmAppObjNotAvail"), ("F5-BIGIP-COMMON-MIB", "bigipRaidDiskFailure"), ("F5-BIGIP-COMMON-MIB", "bigipGtmDcEnabled"), ("F5-BIGIP-COMMON-MIB", "bigipSystemCheckAlertMilliVoltageHigh"), ("F5-BIGIP-COMMON-MIB", "bigipGtmProberPoolEnabled"), ("F5-BIGIP-COMMON-MIB", "bigipGtmDcAvail"), ("F5-BIGIP-COMMON-MIB", "bigipFeatureOnline"), ("F5-BIGIP-COMMON-MIB", "bigipAsmFtpRequestViolation"), ("F5-BIGIP-COMMON-MIB", "bigipGtmWideIpDisabled"), ("F5-BIGIP-COMMON-MIB", "bigipLibhalDiskBayRemoved"), ("F5-BIGIP-COMMON-MIB", "bigipLibhalBladePoweredOff"), ("F5-BIGIP-COMMON-MIB", "bigipGtmVsAvail"), ("F5-BIGIP-COMMON-MIB", "bigipGtmAppObjAvail"), ("F5-BIGIP-COMMON-MIB", "bigipUpdateError"), ("F5-BIGIP-COMMON-MIB", "bigipNodeRate"), ("F5-BIGIP-COMMON-MIB", "bigipLibhalSensorAlarmCritical"), ("F5-BIGIP-COMMON-MIB", "bigipGtmJoinedGroup"), ("F5-BIGIP-COMMON-MIB", "bigipGtmServerAvail"), ("F5-BIGIP-COMMON-MIB", "bigipGtmPoolAvail"), ("F5-BIGIP-COMMON-MIB", "bigipLtmVsDisabled"), ("F5-BIGIP-COMMON-MIB", "bigipSslLimitExceeded"), ("F5-BIGIP-COMMON-MIB", "bigipGtmProberPoolDisabled"), ("F5-BIGIP-COMMON-MIB", "bigipGtmDcDisabled"), ("F5-BIGIP-COMMON-MIB", "bigipDiskPartitionWarn"), ("F5-BIGIP-COMMON-MIB", "bigipGtmPoolDisabled"), ("F5-BIGIP-COMMON-MIB", "bigipChassisPowerSupplyBad"), ("F5-BIGIP-COMMON-MIB", "bigipGtmAppAvail"), ("F5-BIGIP-COMMON-MIB", "bigipUpdatePriority"), ("F5-BIGIP-COMMON-MIB", "bigipTrafficGroupActive"), ("F5-BIGIP-COMMON-MIB", "bigipGtmAppNotAvail"), ("F5-BIGIP-COMMON-MIB", "bigipChassisFanBad"), ("F5-BIGIP-COMMON-MIB", "bigipVcmpAlertsVcmpHBDetected"), ("F5-BIGIP-COMMON-MIB", "bigipLibhalSsdLogicalDiskRemoved"), ("F5-BIGIP-COMMON-MIB", "bigipConfigLoaded"), ("F5-BIGIP-COMMON-MIB", "bigipSystemCheckAlertMilliVoltageLow"), ("F5-BIGIP-COMMON-MIB", "bigipDnsRequestRateLimiterEngaged"), ("F5-BIGIP-COMMON-MIB", "bigipGtmBoxAvail"), ("F5-BIGIP-COMMON-MIB", "bigipSystemCheckAlertFanSpeedLow"), ("F5-BIGIP-COMMON-MIB", "bigipLibhalSsdPhysicalDiskRemoved"), ("F5-BIGIP-COMMON-MIB", "bigipNodeDown"), ("F5-BIGIP-COMMON-MIB", "bigipVcmpAlertsVcmpHBLost"), ("F5-BIGIP-COMMON-MIB", "bigipTrafficGroupActivate"), ("F5-BIGIP-COMMON-MIB", "bigipFeatureFailed"), ("F5-BIGIP-COMMON-MIB", "bigipPsPowerOn"), ("F5-BIGIP-COMMON-MIB", "bigipChmandAlertFanTrayBad"), ("F5-BIGIP-COMMON-MIB", "bigipAsmRequestBlocked"), ("F5-BIGIP-COMMON-MIB", "bigipSystemCheckAlertPowerHigh"), ("F5-BIGIP-COMMON-MIB", "bigipSystemCheckAlertCurrentLow"), ("F5-BIGIP-COMMON-MIB", "bigipCpuFanSpeedBad"), ("F5-BIGIP-COMMON-MIB", "bigipGtmLeftGroup"), ("F5-BIGIP-COMMON-MIB", "bigipGtmProberPoolMbrStatusChange"), ("F5-BIGIP-COMMON-MIB", "bigipLogEmerg"), ("F5-BIGIP-COMMON-MIB", "bigipClusterPrimaryChanged"), ("F5-BIGIP-COMMON-MIB", "bigipSystemShutdown"), ("F5-BIGIP-COMMON-MIB", "bigipClusterdNoResponse"), ("F5-BIGIP-COMMON-MIB", "bigipVcmpAlertsVcmpPowerOff"), ("F5-BIGIP-COMMON-MIB", "bigipInetPortExhaustion"), ("F5-BIGIP-COMMON-MIB", "bigipGtmProberPoolMbrDisabled"), ("F5-BIGIP-COMMON-MIB", "bigipAsmSmtpRequestViolation"), ("F5-BIGIP-COMMON-MIB", "bigipGtmWideIpAvail"), ("F5-BIGIP-COMMON-MIB", "bigipTrafficGroupDeactivate"), ("F5-BIGIP-COMMON-MIB", "bigipGtmServerEnabled"), ("F5-BIGIP-COMMON-MIB", "bigipCpuFanSpeedLow"), ("F5-BIGIP-COMMON-MIB", "bigipUnsolicitedRepliesExceededThreshold"), ("F5-BIGIP-COMMON-MIB", "bigipTrafficGroupForcedOffline"), ("F5-BIGIP-COMMON-MIB", "bigipBladeOffline"), ("F5-BIGIP-COMMON-MIB", "bigipUpdateServer"), ("F5-BIGIP-COMMON-MIB", "bigipGtmLinkNotAvail"), ("F5-BIGIP-COMMON-MIB", "bigipGtmServerNotAvail"), ("F5-BIGIP-COMMON-MIB", "bigipSystemCheckAlertCurrentHigh"), ("F5-BIGIP-COMMON-MIB", "bigipGtmWideIpNotAvail"), ("F5-BIGIP-COMMON-MIB", "bigipCpuTempHigh"), ("F5-BIGIP-COMMON-MIB", "bigipAsmDosAttackDetected"), ("F5-BIGIP-COMMON-MIB", "bigipGtmBoxNotAvail"), ("F5-BIGIP-COMMON-MIB", "bigipLicenseExpired"), ("F5-BIGIP-COMMON-MIB", "bigipLicenseFailed"), ("F5-BIGIP-COMMON-MIB", "bigipAggrReaperStateChange"), ("F5-BIGIP-COMMON-MIB", "bigipAsmSmtpRequestBlocked"), ("F5-BIGIP-COMMON-MIB", "bigipGtmProberPoolMbrEnabled"), ("F5-BIGIP-COMMON-MIB", "bigipMemberRate"), ("F5-BIGIP-COMMON-MIB", "bigipPsPowerOff"), ("F5-BIGIP-COMMON-MIB", "bigipDosAttackStart"), ("F5-BIGIP-COMMON-MIB", "bigipARPConflict"), ("F5-BIGIP-COMMON-MIB", "bigipVirtualRate"), ("F5-BIGIP-COMMON-MIB", "bigipTrafficGroupStandby"), ("F5-BIGIP-COMMON-MIB", "bigipTamdAlert"), ("F5-BIGIP-COMMON-MIB", "bigipGtmLinkEnabled"), ("F5-BIGIP-COMMON-MIB", "bigipStandByFail"), ("F5-BIGIP-COMMON-MIB", "bigipGtmProberPoolMbrStatusChangeReason"), ("F5-BIGIP-COMMON-MIB", "bigipGtmServerDisabled"), ("F5-BIGIP-COMMON-MIB", "bigipDiskPartitionGrowth"), ("F5-BIGIP-COMMON-MIB", "bigipServiceUp"), ("F5-BIGIP-COMMON-MIB", "bigipLogErr"), ("F5-BIGIP-COMMON-MIB", "bigipGtmProberPoolStatusChange"), ) )
if mibBuilder.loadTexts: bigipSystemNotifyGroup.setDescription("The notifications relating to the operation of \nthe BIGIP system.")

# Compliances

bigipNotificationCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 3375, 2, 5, 1, 4)).setObjects(*(("F5-BIGIP-COMMON-MIB", "bigipAgentNotifyGroup"), ("F5-BIGIP-COMMON-MIB", "bigipNotifyObjectsGroup"), ) )
if mibBuilder.loadTexts: bigipNotificationCompliance.setDescription("This specifies the objects that are required to claim\ncompliance to F5 Traffic Management System.")

# Exports

# Module identity
mibBuilder.exportSymbols("F5-BIGIP-COMMON-MIB", PYSNMP_MODULE_ID=f5)

# Types
mibBuilder.exportSymbols("F5-BIGIP-COMMON-MIB", LongDisplayString=LongDisplayString)

# Objects
mibBuilder.exportSymbols("F5-BIGIP-COMMON-MIB", f5=f5, bigipTrafficMgmt=bigipTrafficMgmt, bigipNotification=bigipNotification, bigipNotifications=bigipNotifications, bigipNotifyObjects=bigipNotifyObjects, bigipNotifyObjMsg=bigipNotifyObjMsg, bigipNotifyObjNode=bigipNotifyObjNode, bigipNotifyObjPort=bigipNotifyObjPort, bigipCompliance=bigipCompliance, bigipCompliances=bigipCompliances, bigipGroups=bigipGroups, bigipNotificationGroups=bigipNotificationGroups)

# Notifications
mibBuilder.exportSymbols("F5-BIGIP-COMMON-MIB", bigipAgentStart=bigipAgentStart, bigipAgentShutdown=bigipAgentShutdown, bigipAgentRestart=bigipAgentRestart, bigipCpuTempHigh=bigipCpuTempHigh, bigipCpuFanSpeedLow=bigipCpuFanSpeedLow, bigipCpuFanSpeedBad=bigipCpuFanSpeedBad, bigipChassisTempHigh=bigipChassisTempHigh, bigipChassisFanBad=bigipChassisFanBad, bigipChassisPowerSupplyBad=bigipChassisPowerSupplyBad, bigipServiceDown=bigipServiceDown, bigipServiceUp=bigipServiceUp, bigipNodeDown=bigipNodeDown, bigipNodeUp=bigipNodeUp, bigipStandby=bigipStandby, bigipActive=bigipActive, bigipActiveActive=bigipActiveActive, bigipFeatureFailed=bigipFeatureFailed, bigipFeatureOnline=bigipFeatureOnline, bigipLicenseFailed=bigipLicenseFailed, bigipLicenseExpired=bigipLicenseExpired, bigipTamdAlert=bigipTamdAlert, bigipAggrReaperStateChange=bigipAggrReaperStateChange, bigipARPConflict=bigipARPConflict, bigipNetLinkDown=bigipNetLinkDown, bigipDiskPartitionWarn=bigipDiskPartitionWarn, bigipDiskPartitionGrowth=bigipDiskPartitionGrowth, bigipAuthFailed=bigipAuthFailed, bigipConfigLoaded=bigipConfigLoaded, bigipLogEmerg=bigipLogEmerg, bigipLogAlert=bigipLogAlert, bigipLogCrit=bigipLogCrit, bigipLogErr=bigipLogErr, bigipLogWarning=bigipLogWarning, bigipPacketRejected=bigipPacketRejected, bigipCompLimitExceeded=bigipCompLimitExceeded, bigipSslLimitExceeded=bigipSslLimitExceeded, bigipExternalLinkChange=bigipExternalLinkChange, bigipAsmRequestBlocked=bigipAsmRequestBlocked, bigipAsmRequestViolation=bigipAsmRequestViolation, bigipGtmPoolAvail=bigipGtmPoolAvail, bigipGtmPoolNotAvail=bigipGtmPoolNotAvail, bigipGtmPoolDisabled=bigipGtmPoolDisabled, bigipGtmPoolEnabled=bigipGtmPoolEnabled, bigipGtmLinkAvail=bigipGtmLinkAvail, bigipGtmLinkNotAvail=bigipGtmLinkNotAvail, bigipGtmLinkDisabled=bigipGtmLinkDisabled, bigipGtmLinkEnabled=bigipGtmLinkEnabled, bigipGtmWideIpAvail=bigipGtmWideIpAvail, bigipGtmWideIpNotAvail=bigipGtmWideIpNotAvail, bigipGtmWideIpDisabled=bigipGtmWideIpDisabled, bigipGtmWideIpEnabled=bigipGtmWideIpEnabled, bigipGtmPoolMbrAvail=bigipGtmPoolMbrAvail, bigipGtmPoolMbrNotAvail=bigipGtmPoolMbrNotAvail, bigipGtmPoolMbrDisabled=bigipGtmPoolMbrDisabled, bigipGtmPoolMbrEnabled=bigipGtmPoolMbrEnabled, bigipGtmServerAvail=bigipGtmServerAvail, bigipGtmServerNotAvail=bigipGtmServerNotAvail, bigipGtmServerDisabled=bigipGtmServerDisabled, bigipGtmServerEnabled=bigipGtmServerEnabled, bigipGtmVsAvail=bigipGtmVsAvail, bigipGtmVsNotAvail=bigipGtmVsNotAvail, bigipGtmVsDisabled=bigipGtmVsDisabled, bigipGtmVsEnabled=bigipGtmVsEnabled, bigipGtmDcAvail=bigipGtmDcAvail, bigipGtmDcNotAvail=bigipGtmDcNotAvail, bigipGtmDcDisabled=bigipGtmDcDisabled, bigipGtmDcEnabled=bigipGtmDcEnabled, bigipHardDiskFailure=bigipHardDiskFailure, bigipGtmAppObjAvail=bigipGtmAppObjAvail, bigipGtmAppObjNotAvail=bigipGtmAppObjNotAvail, bigipGtmAppAvail=bigipGtmAppAvail, bigipGtmAppNotAvail=bigipGtmAppNotAvail, bigipGtmJoinedGroup=bigipGtmJoinedGroup, bigipGtmLeftGroup=bigipGtmLeftGroup, bigipStandByFail=bigipStandByFail, bigipInetPortExhaustion=bigipInetPortExhaustion, bigipGtmBoxAvail=bigipGtmBoxAvail, bigipGtmBoxNotAvail=bigipGtmBoxNotAvail, bigipAsmFtpRequestBlocked=bigipAsmFtpRequestBlocked, bigipAsmFtpRequestViolation=bigipAsmFtpRequestViolation, bigipGtmBig3dSslCertExpired=bigipGtmBig3dSslCertExpired, bigipGtmBig3dSslCertWillExpire=bigipGtmBig3dSslCertWillExpire, bigipGtmSslCertExpired=bigipGtmSslCertExpired, bigipGtmSslCertWillExpire=bigipGtmSslCertWillExpire, bigipAsmSmtpRequestBlocked=bigipAsmSmtpRequestBlocked, bigipAsmSmtpRequestViolation=bigipAsmSmtpRequestViolation, bigipBladeTempHigh=bigipBladeTempHigh, bigipBladeNoPower=bigipBladeNoPower, bigipClusterdNoResponse=bigipClusterdNoResponse, bigipBladeOffline=bigipBladeOffline, bigipAsmDosAttackDetected=bigipAsmDosAttackDetected, bigipAsmBruteForceAttackDetected=bigipAsmBruteForceAttackDetected, bigipAomCpuTempTooHigh=bigipAomCpuTempTooHigh, bigipGtmKeyGenerationRollover=bigipGtmKeyGenerationRollover, bigipGtmKeyGenerationExpiration=bigipGtmKeyGenerationExpiration, bigipRaidDiskFailure=bigipRaidDiskFailure, bigipGtmProberPoolStatusChange=bigipGtmProberPoolStatusChange, bigipGtmProberPoolStatusChangeReason=bigipGtmProberPoolStatusChangeReason, bigipGtmProberPoolDisabled=bigipGtmProberPoolDisabled, bigipGtmProberPoolEnabled=bigipGtmProberPoolEnabled, bigipGtmProberPoolMbrStatusChange=bigipGtmProberPoolMbrStatusChange, bigipGtmProberPoolMbrStatusChangeReason=bigipGtmProberPoolMbrStatusChangeReason, bigipGtmProberPoolMbrDisabled=bigipGtmProberPoolMbrDisabled, bigipGtmProberPoolMbrEnabled=bigipGtmProberPoolMbrEnabled, bigipAvrAlertsMetricSnmp=bigipAvrAlertsMetricSnmp, bigipAvrAlertsMetricSmtp=bigipAvrAlertsMetricSmtp, bigipVcmpAlertsVcmpPowerOn=bigipVcmpAlertsVcmpPowerOn, bigipVcmpAlertsVcmpPowerOff=bigipVcmpAlertsVcmpPowerOff, bigipVcmpAlertsVcmpHBLost=bigipVcmpAlertsVcmpHBLost, bigipVcmpAlertsVcmpHBDetected=bigipVcmpAlertsVcmpHBDetected, bigipSsdMwiNearThreshold=bigipSsdMwiNearThreshold, bigipSsdMwiReachedThreshold=bigipSsdMwiReachedThreshold, bigipSystemCheckAlertTempHigh=bigipSystemCheckAlertTempHigh, bigipSystemCheckAlertVoltageHigh=bigipSystemCheckAlertVoltageHigh, bigipSystemCheckAlertFanSpeedLow=bigipSystemCheckAlertFanSpeedLow, bigipLibhalSsdPhysicalDiskRemoved=bigipLibhalSsdPhysicalDiskRemoved, bigipLibhalSsdLogicalDiskRemoved=bigipLibhalSsdLogicalDiskRemoved, bigipLibhalDiskBayRemoved=bigipLibhalDiskBayRemoved, bigipLibhalBladePoweredOff=bigipLibhalBladePoweredOff, bigipLibhalSensorAlarmCritical=bigipLibhalSensorAlarmCritical, bigipChmandAlertFanTrayBad=bigipChmandAlertFanTrayBad, bigipUnsolicitedRepliesExceededThreshold=bigipUnsolicitedRepliesExceededThreshold, bigipSystemCheckAlertVoltageLow=bigipSystemCheckAlertVoltageLow, bigipSystemCheckAlertMilliVoltageHigh=bigipSystemCheckAlertMilliVoltageHigh, bigipSystemCheckAlertCurrentHigh=bigipSystemCheckAlertCurrentHigh, bigipSystemCheckAlertPowerHigh=bigipSystemCheckAlertPowerHigh)
mibBuilder.exportSymbols("F5-BIGIP-COMMON-MIB", bigipSystemCheckAlertMilliVoltageLow=bigipSystemCheckAlertMilliVoltageLow, bigipSystemCheckAlertCurrentLow=bigipSystemCheckAlertCurrentLow, bigipSystemCheckAlertPowerLow=bigipSystemCheckAlertPowerLow, bigipNodeRate=bigipNodeRate, bigipMemberRate=bigipMemberRate, bigipVirtualRate=bigipVirtualRate, bigipDosAttackStart=bigipDosAttackStart, bigipDosAttackStop=bigipDosAttackStop, bigipLtmVsAvail=bigipLtmVsAvail, bigipLtmVsUnavail=bigipLtmVsUnavail, bigipLtmVsEnabled=bigipLtmVsEnabled, bigipLtmVsDisabled=bigipLtmVsDisabled, bigipDnsRequestRateLimiterEngaged=bigipDnsRequestRateLimiterEngaged, bigipGtmRequestRateLimiterEngaged=bigipGtmRequestRateLimiterEngaged, bigipTrafficGroupStandby=bigipTrafficGroupStandby, bigipTrafficGroupActive=bigipTrafficGroupActive, bigipTrafficGroupOffline=bigipTrafficGroupOffline, bigipTrafficGroupForcedOffline=bigipTrafficGroupForcedOffline, bigipTrafficGroupDeactivate=bigipTrafficGroupDeactivate, bigipTrafficGroupActivate=bigipTrafficGroupActivate, bigipPsPowerOn=bigipPsPowerOn, bigipPsPowerOff=bigipPsPowerOff, bigipPsAbsent=bigipPsAbsent, bigipClusterPrimaryChanged=bigipClusterPrimaryChanged, bigipSystemShutdown=bigipSystemShutdown, bigipFipsDeviceError=bigipFipsDeviceError, bigipUpdatePriority=bigipUpdatePriority, bigipUpdateServer=bigipUpdateServer, bigipUpdateError=bigipUpdateError)

# Groups
mibBuilder.exportSymbols("F5-BIGIP-COMMON-MIB", bigipNotifyObjectsGroup=bigipNotifyObjectsGroup, bigipAgentNotifyGroup=bigipAgentNotifyGroup, bigipSystemNotifyGroup=bigipSystemNotifyGroup)

# Compliances
mibBuilder.exportSymbols("F5-BIGIP-COMMON-MIB", bigipNotificationCompliance=bigipNotificationCompliance)
